# License: MIT
# Copyright Â© 2022 Frequenz Energy-as-a-Service GmbH

"""Timeseries basic types."""

from dataclasses import dataclass
from datetime import datetime
from typing import AsyncIterator, Callable, Coroutine, Optional


@dataclass(frozen=True)
class Sample:
    """A measurement taken at a particular point in time.

    The `value` could be `None` if a component is malfunctioning or data is
    lacking for another reason, but a sample still needs to be sent to have a
    coherent view on a group of component metrics for a particular timestamp.
    """

    timestamp: datetime
    value: Optional[float] = None


Source = AsyncIterator[Sample]
"""A source for a timeseries.

A timeseries can be received sample by sample in a streaming way
using a source.
"""

Sink = Callable[[Sample], Coroutine[None, None, None]]
"""A sink for a timeseries.

A new timeseries can be generated by sending samples to a sink.

This should be an `async` callable, for example:

``` python
async some_sink(Sample) -> None:
    ...
```

Args:
    sample (Sample): A sample to be sent out.
"""
